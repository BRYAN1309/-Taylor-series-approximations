# -*- coding: utf-8 -*-
"""AOL SCICOMP BRYANTHANAYA 2702334784-approximation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zsn6PIo_hfkTsqX5EnRCG2OjOb6Z4fc_
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures

# Provided monthly production data (M1 to M144)
production_data = [
    1863, 1614, 2570, 1685, 2101, 1811, 2457, 2171, 2134, 2502, 2358, 2399, 2048, 2523,
    2086, 2391, 2150, 2340, 3129, 2277, 2964, 2997, 2747, 2862, 3405, 2677, 2749, 2755,
    2963, 3161, 3623, 2768, 3141, 3439, 3601, 3531, 3477, 3376, 4027, 3175, 3274, 3334,
    3964, 3649, 3502, 3688, 3657, 4422, 4197, 4441, 4736, 4521, 4485, 4644, 5036, 4876,
    4789, 4544, 4975, 5211, 4880, 4933, 5079, 5339, 5232, 5520, 5714, 5260, 6110, 5334,
    5988, 6235, 6365, 6266, 6345, 6118, 6497, 6278, 6638, 6590, 6271, 7246, 6584, 6594,
    7092, 7326, 7409, 7976, 7959, 8012, 8195, 8008, 8313, 7791, 8368, 8933, 8756, 8613,
    8705, 9098, 8769, 9544, 9050, 9186, 10012, 9685, 9966, 10048, 10244, 10740, 10318,
    10393, 10986, 10635, 10731, 11749, 11849, 12123, 12274, 11666, 11960, 12629, 12915,
    13051, 13387, 13309, 13732, 13162, 13644, 13808, 14101, 13992, 15191, 15018, 14917,
    15046, 15556, 15893, 16388, 16782, 16716, 17033, 16896, 17689
]

# Create the feature and target arrays
months = np.arange(1, len(production_data) + 1).reshape(-1, 1)  # M1 to M144
production = np.array(production_data).reshape(-1, 1)

# Create polynomial features
poly_features = PolynomialFeatures(degree=4, include_bias=False)  # You can adjust the degree for better fit
months_poly = poly_features.fit_transform(months)

# Fit the polynomial regression model
reg = LinearRegression()
reg.fit(months_poly, production)

# Predict values
months_vals = np.linspace(1, len(production_data) + 50, 200).reshape(-1, 1)
months_vals_poly = poly_features.transform(months_vals)
production_vals = reg.predict(months_vals_poly)

# Get the coefficients and intercept
coefficients = reg.coef_[0]
intercept = reg.intercept_[0]

# Print the equation in the form of y = ...
equation_parts = []

for i, coef in enumerate(coefficients[::-1]):
    power = len(coefficients) - i - 1
    if power == 0:
        equation_parts.append(f"{coef:.2f}")
    elif power == 1:
        equation_parts.append(f"{coef:.2f}x")
    else:
        equation_parts.append(f"{coef:.2f}x^{power}")

equation_parts.append(f"{intercept:.2f}")

equation = " + ".join(equation_parts)

# Plot the results
plt.figure(figsize=(12, 8))  # Make the graph larger
plt.scatter(months, production, label="Actual Production", color="b")
plt.plot(months_vals, production_vals, color="r", label=f"Polynomial Trend: {equation}")
plt.axhline(y=25000, color='g', linestyle='--', label="Warehouse Capacity (25000 bags)")
plt.xlabel('Month')
plt.ylabel('Bag Production')
plt.title('Bag Production Trend (Polynomial Regression)')
plt.legend()
plt.grid(True)
plt.show()

# Using Newton-Raphson method to find the month when production exceeds 25,000 bags
# Define the polynomial function
def poly_func(x):
    return sum(c * x**i for i, c in enumerate(coefficients[::-1], start=1)) + intercept

# Define the derivative of the polynomial function
def poly_func_deriv(x):
    return sum(i * c * x**(i-1) for i, c in enumerate(coefficients[::-1], start=1) if i > 0)

# Initial guess (adjusted based on the specific data trend)
x0 = 170

# Newton-Raphson method
for _ in range(100):
    f_x0 = poly_func(x0) - 25000
    f_prime_x0 = poly_func_deriv(x0)
    x1 = x0 - f_x0 / f_prime_x0
    if abs(x1 - x0) < 1e-6:
        break
    x0 = x1

start_build_month = 170-13

print(f"Start build month: {start_build_month}")